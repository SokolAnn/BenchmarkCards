{
  "benchmark_details": {
    "is_benchmark": true,
    "name": "SWE-PolyBench (Multi-language Benchmark for Repository Level Evaluation of Coding Agents)",
    "abbreviation": "SWE-PolyBench",
    "overview": "SWE-PolyBench is a new multi-language benchmark for repository-level, execution-based evaluation of coding agents, containing 2110 instances from 21 repositories across Java, JavaScript, TypeScript, and Python, involving bug fixes, feature additions, and code refactoring.",
    "data_type": "code modifications (pull requests)",
    "domains": [
      "Software Engineering"
    ],
    "languages": [
      "Java",
      "JavaScript",
      "TypeScript",
      "Python"
    ],
    "similar_benchmarks": [
      "SWE-Bench"
    ],
    "resources": [
      "https://github.com/amazon-science/SWE-PolyBench",
      "https://huggingface.co/datasets/AmazonScience/SWE-PolyBench"
    ]
  },
  "purpose_and_intended_users": {
    "goal": "To drive progress in developing versatile and robust AI coding assistants for real-world software engineering by providing a comprehensive multi-language evaluation framework.",
    "audience": [
      "ML Researchers",
      "Industry Practitioners",
      "Model Developers"
    ],
    "tasks": [
      "Bug Fixing",
      "Feature Addition",
      "Code Refactoring"
    ],
    "limitations": "While diverse in terms of languages and tasks, SWE-PolyBench has several limitations including a long tail of everyday coding tasks that are not addressed.",
    "out_of_scope_uses": []
  },
  "data": {
    "source": "Pull requests and issues from 21 repositories in Java, JavaScript, TypeScript, and Python.",
    "size": "2110 instances",
    "format": "JSON",
    "annotation": "Automatically generated for task descriptions and code patches."
  },
  "methodology": {
    "methods": [
      "Automated metrics",
      "Execution-based testing"
    ],
    "metrics": [
      "Pass Rate",
      "Node-level retrieval metrics",
      "File-level retrieval metrics"
    ],
    "calculation": "Pass rate is defined as the percentage of tests that pass after applying the generated code changes, calculated over the entire dataset.",
    "interpretation": "A higher pass rate indicates better performance by coding agents on the benchmark tasks.",
    "baseline_results": null,
    "validation": "Validation through execution of test suites associated with the pull requests."
  },
  "targeted_risks": {
    "risk_categories": [
      "Accuracy",
      "Fairness"
    ],
    "atlas_risks": {
      "risks": [
        {
          "category": "Accuracy",
          "subcategory": [
            "Unrepresentative data"
          ]
        },
        {
          "category": "Fairness",
          "subcategory": [
            "Data bias"
          ]
        }
      ]
    },
    "demographic_analysis": "The dataset includes instances from diverse programming languages.",
    "harm": [
      "Potential for code generation that does not adhere to best practices."
    ]
  },
  "ethical_and_legal_considerations": {
    "privacy_and_anonymity": "N/A",
    "data_licensing": "N/A",
    "consent_procedures": "N/A",
    "compliance_with_regulations": "N/A"
  }
}