{
  "benchmark_details": {
    "is_benchmark": true,
    "name": "FormAI dataset",
    "abbreviation": "FormAI",
    "overview": "A large collection of 112,000 AI-generated compilable and independent C programs with vulnerability classification produced by GPT-3.5-turbo and labeled using formal verification (ESBMC). The dataset provides per-program vulnerability labels (type, line number, function name) and mappings to Common Weakness Enumeration (CWE) identifiers, intended for evaluating static/dynamic analysis tools and training machine learning models.",
    "data_type": "text (compilable C programs / C source code)",
    "domains": [
      "Software Engineering",
      "Cybersecurity"
    ],
    "languages": [],
    "similar_benchmarks": [
      "Big-Vul",
      "Draper",
      "SARD",
      "Juliet",
      "Devign",
      "REVEAL",
      "DiverseVul"
    ],
    "resources": [
      "https://github.com/FormAI-Dataset",
      "https://doi.org/10.1145/3617555.3617874",
      "https://arxiv.org/abs/2307.02192"
    ]
  },
  "purpose_and_intended_users": {
    "goal": "Provide a large AI-generated dataset of 112,000 compilable C programs labeled via formal verification (ESBMC) to benchmark vulnerability detection tools and to train machine learning models for vulnerability detection and classification.",
    "audience": [
      "Machine Learning Researchers",
      "Software Security Researchers",
      "Tool Developers",
      "Model Developers"
    ],
    "tasks": [
      "Vulnerability Detection",
      "Vulnerability Classification",
      "Static Analysis Evaluation",
      "Machine Learning Model Training for Code Vulnerability Detection"
    ],
    "limitations": "ESBMC detects only formally verifiable errors within a predefined bound; absence of a detected vulnerability means 'no vulnerability within the bound' rather than absolute absence. The authors used ESBMC with --unwind 1 and --timeout 30 seconds; samples where ESBMC timed out or crashed are classified as unknown or excluded from CSV labels. ESBMC cannot detect design flaws, semantic errors, or performance issues. Some ESBMC-reported line numbers (e.g., for gets()) were misleading and excluded from CSVs. A subset of samples (â‰ˆ1% for clang compilation; additional samples where ESBMC crashed) were not classified.",
    "out_of_scope_uses": []
  },
  "data": {
    "source": "Generated by GPT-3.5-turbo using a dynamic zero-shot prompting technique; compilability checked with the GNU C compiler; vulnerabilities labeled using the ESBMC bounded model checker.",
    "size": "112,000 examples (C programs); 8,848,765 total lines of code examined; average 79 lines per sample. 109,757 samples compiled with gcc (~98%). Verification executed on 106,139 files; 57,389 programs found vulnerable; 197,800 vulnerabilities detected.",
    "format": "C source files (.c) and CSV files (.csv) containing labels (Filename, Vulnerability type, Function name, Line number, Error type) and an additional CSV with the C code in a column.",
    "annotation": "Automatically annotated via ESBMC (Efficient SMT-based Bounded Model Checker). Labels include vulnerability type, vulnerable function name, and line number. Identified vulnerabilities were associated with CWE identifiers. Only labels where ESBMC finished within the configured timeout (30 seconds) and unwind settings were kept; some ESBMC outputs (misleading line numbers for external library code) were excluded from CSVs."
  },
  "methodology": {
    "methods": [
      "Formal verification (ESBMC bounded model checking)",
      "Compilation check using GNU C compiler (gcc)",
      "Automated labeling via ESBMC with timeout/unwind settings"
    ],
    "metrics": [
      "Count of vulnerable programs",
      "Percentage of programs vulnerable",
      "Number of vulnerabilities detected",
      "Distribution of vulnerabilities across CWE identifiers"
    ],
    "calculation": "Programs classified into three categories by ESBMC output: VS (verification successful: 'NOT VULNERABLE up to bound k'), VU (verification unknown: timed out or incomplete), VF (verification failed: counterexample found). A program is 'vulnerable' if ESBMC produces a counterexample within the allotted timeout and unwind settings. Verification run with: --unwind 1 --overflow --multi-property --timeout 30.",
    "interpretation": "N/A",
    "baseline_results": null,
    "validation": "Compilability validated using GNU C compiler; formal verification via ESBMC provides counterexamples for detected vulnerabilities, eliminating false positives within the verification bound. The authors retained only ESBMC labels where the verifier finished within 30 seconds; samples causing ESBMC crashes or clang compilation failures were excluded from the CSV labels but kept in the dataset."
  },
  "targeted_risks": {
    "risk_categories": [
      "Security",
      "Safety",
      "Robustness",
      "Accuracy"
    ],
    "atlas_risks": {
      "risks": [
        {
          "category": "Accuracy",
          "subcategory": [
            "Unrepresentative data",
            "Poor model accuracy"
          ]
        },
        {
          "category": "Robustness",
          "subcategory": [
            "Hallucination"
          ]
        },
        {
          "category": "Governance",
          "subcategory": [
            "Lack of testing diversity"
          ]
        },
        {
          "category": "Transparency",
          "subcategory": [
            "Uncertain data provenance"
          ]
        },
        {
          "category": "Value Alignment",
          "subcategory": [
            "Harmful code generation"
          ]
        }
      ]
    },
    "demographic_analysis": null,
    "harm": "Detection of software vulnerabilities affecting safety and security properties of C programs (e.g., buffer overflows, integer overflow/arithmetic overflow, array bounds violations, null pointer dereferences, division by zero, memory management errors)."
  },
  "ethical_and_legal_considerations": {
    "privacy_and_anonymity": "N/A",
    "data_licensing": "N/A",
    "consent_procedures": "N/A",
    "compliance_with_regulations": "N/A"
  }
}