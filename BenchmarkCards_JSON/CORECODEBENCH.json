{
  "benchmark_details": {
    "is_benchmark": true,
    "name": "CORECODEBENCH",
    "abbreviation": "N/A",
    "overview": "CORECODEBENCH is a configurable multi-scenario repository-level benchmark designed to evaluate the performance of Large Language Models (LLMs) on engineering-level code through diverse scenarios including Development, BugFix, and Test-Driven Development tasks.",
    "data_type": "coding problems and test cases",
    "domains": [
      "Software Engineering"
    ],
    "languages": [
      "Python"
    ],
    "similar_benchmarks": [
      "SWEBench",
      "BigCodeBench",
      "REPOEXEC"
    ],
    "resources": [
      "https://github.com/AGI-Eval-Official/CoreCodeBench",
      "https://huggingface.co/collections/tubehhh/corecodebench-68256d2faabf4b1610a08caa"
    ]
  },
  "purpose_and_intended_users": {
    "goal": "To systematically evaluate and compare the capabilities of LLMs in real-world engineering tasks using a diverse range of coding problems and scenarios.",
    "audience": [
      "ML Researchers",
      "Software Engineers",
      "Model Developers"
    ],
    "tasks": [
      "Code Generation",
      "Bug Fixing",
      "Test-Driven Development"
    ],
    "limitations": "The benchmark requires repositories with substantial unit tests for effective evaluation.",
    "out_of_scope_uses": []
  },
  "data": {
    "source": "Generated from real-world repositories selected from the PyPI library",
    "size": "1,545 problems across various types",
    "format": "N/A",
    "annotation": "Automated generation of problems using a fully automated pipeline (CorePipe)"
  },
  "methodology": {
    "methods": [
      "Automated metrics",
      "Human evaluation"
    ],
    "metrics": [
      "Pass@1",
      "PassRate"
    ],
    "calculation": "Pass@1 is the percentage of problems where the first solution generated by a model passes all associated unit tests; PassRate measures improvement over a baseline.",
    "interpretation": "Higher Pass@1 scores indicate better model performance in generating correct code solutions directly from problems.",
    "baseline_results": "N/A",
    "validation": "Quality inspection through both automated methods and manual checks by experienced developers."
  },
  "targeted_risks": {
    "risk_categories": [
      "Bias",
      "Privacy",
      "Fairness",
      "Robustness",
      "Accuracy"
    ],
    "atlas_risks": {
      "risks": []
    },
    "demographic_analysis": "N/A",
    "harm": "N/A"
  },
  "ethical_and_legal_considerations": {
    "privacy_and_anonymity": "N/A",
    "data_licensing": "N/A",
    "consent_procedures": "N/A",
    "compliance_with_regulations": "N/A"
  }
}